_HiStOrY_V2_
print("hello\040world")
add(3,4)
1+2
from\040operator\040import\040add
add(3,2)
def\040greet()
def\040greet():
print("hello")
1+2
2+3
add(5464,32232)
def\040greet():
print("hello")
def\040greet():
\040print("hello")
greet()
hello\040=\040greet
hello()
def\040number()
def\040number():
\0403*7
number()
print(number())
def\040number():
\040print(3*7)
number()
from\040operator\040import\040mult
from\040operator\040import\040mul
mul(832,121)
exit()
-m\040doctest\040lab01.py
python3\040-m\040doctest\040lab01.py
from\040math\040import\040pi
pi
radius\040=\04010
radius
area,\040circ\040=\040pi*radius*radius,\040pi*2*radius
area
circ
radius\040=\04020
radius
area
circ
from\040math\040import\040add,\040mul
from\040math\040import\040add
from\040math\040import\040add()
max
max(12,88,120)
add(3,4)
add(x,y)\040=\040x+y
exit()
f=max
f(45,54)
from\040operator\040import\040add
add(45,33)
from\040operator\040import\040mul(12,22)
from\040operator\040import\040mul
mul(12,22)
def\040square(x)\040=\040mul(x,x)
def\040square(x):
\040return\040mul(x,x)
square(8)
square(add(square8),3)
square(add(square8),3))
square(add(square(8),3))
def\040dickbutt:
def\040dickbutt():
\040\040\040\040fart\040=\0409
\040\040\040\040sweater\040=\04072
\040\040\040\040return\040true
dickbutt()
\040\040\040\040return\040'true'
return\040'true'
echo\040treue
from\040operator\040import\040*
exp(2,4)
def\040sum_of_squares(x,y):
\040\040\040\040return\040add(square(x),\040square(y))
sum_of_squares(3,4)
clear()
radius\040=\04010
man
man\040python3
from\040math\040import\040*
from\040operator\040import\040*
clear
clear()
exit()
for(i\040=\0400;\040i<\0404;\040i\040=\040i+1):
for\040x\040in\040range(0,3):
\040\040\040\040print\040"poopoo"
None
print(-2)
print(None)
print(1,2,3)
print(poopoo)
for\040x\040in\040range(0,3):
\040\040\040\040print(x)
pi
from\040math\040import\040pi
for\040x\040in\040range(0,\0403):
\040\040\040\040print(x,\040pi*x)
exit()
2144/42487
exit()
from\040math\040import\040pi
from\040operator\040import\040add,mul
mul(pi,3)
for\040x\040in\040range(0,3):
\040\040\040\040print(mul(x,pi))
2+3
from\040operator\040import\040add,\040mul
add(2,3)
2+3*4+5
add(add(2,\040mul(3,4)),5)
clear
clear()
~/programming/cs61a/ex.py
~/Programming/cs61a/ex.py
Programming/cs61a/ex.py
exit()
ex.py
exit()
remainder
quotient
exit()
absolute_value(-3)
exit()
absolute_value(-3)
absolute_value(0)
absolute_value(3+22)
exit()
absolute_value(12)
exit()
fibonacci_sequence(1)
fibonacci_sequence(3)
exit()
fibonacci_sequence(0)
fibonacci_sequence(3)
fibonacci_sequence(12)
exit()
sum_of_digits(4333)
sum_of_digits(sum_of_digits(29))
from\040operator\040import\040mul
mul(sum_of_digits(343243),sum_of_digits(sum_of_digits(32432555)))
q
escape
quit
quit()
ex2.py
quit()
luhn_sum(43)
quit()
luhn_sum(43)
luhn_sum(111234)
luhn_sum(23)
luhn_sum(510)
luhn_sum(510510510510510)
quit()
square(4)
apply_twice(square,\0403)
quit()
sum_of_digits(34)
clear()
clear
quit()
sum_of_digits(132)
sum_of_digits(132656)
sum_of_digits(256)
sum_of_digits(2)
quit()
split(2015)
print_down(2015)
print_down(2342555)
quit()
g\040=\040make_adder(4)
g(8)
quit()
pair\040=\040[1,2,3]
pair
from\040operator\040import\040add
add(pair,\040pair)
add(pair[0],\040pair[2])
from\040operator\040import\040getitem
getitem(pair,\0401)
clear
quit()
x\040=\040rational(2,5)
x
add_rational(x,\040[1,2])
quit()
print_rational([1,2])
quit()
print_rational([25,\0405])
quit()
print_rational([1,2])
rational(2,2)
quit()
rational(2,2)
clear()
quit
quit()
(1,2)
quit()
alpha\040=\040[54,65,73,12,1,3,5]
len(alpha)
alpha
alpha[3]
alpha[alpha[5]-alpha[4]]
alpha[-1
alpha[-1]
clear
clear()
^d
^D
alpha
[2,5]\040+\040[4,7]
[2,5,4,7]\040*\0402
[[1,2],[2,3]]
pairs\040=\040[[1,2],[2,3]]
pairs[0]
pairs[0][1]
pairs[0][0]
digits\040=\040[1,8,2,8]
digits\040+\040[1]
for\040x\040in\040range\040of\0403:
quit()
triangular_sum(1)
triangular_sum(2)
triangular_sum(3)
triangular_sum(4)
triangular_sum(5)
triangular_sum(6)
quit()
triangle_num(1)
triangle_num(10)
triangle_num(543646666)
triangle_num(5436)
triangle_num(556)
alpha\040=\040triangular_sum(3)
alpha
qu
quit()
g_iter(1)
g_iter(2)
g_iter(3)
g_iter(4)
quit()
g_iter(1)
g_iter(2)
g_iter(3)
g_iter(4)
quit()
g_iter(4)
quit()
g_iter(2)
g_iter(3)
g_iter(4)
g_iter(5)
quit()
g_iter(5)
g_iter(6)
g_iter(1)
g_iter(2)
g_iter(3)
g_iter(4)
g_iter(5)
g_iter(6)
quit()
g(1)
g(4)
g(5)
quit()
pingpong(5)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
pingpong(15)
pingpong(21)
pingpong(22)
pingpong(30)
pingpong(68)
pingpong(69)
pingpong(70)
pingpong(71)
pingpong(72)
pingpong(100)
quit()
pingpong(5)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
quit()
pingpong(6)
pingpong(5)
pingpong(7)
quit()
pingpong(7)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
quit()
pingpong(9)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
pingpong(10)
quit()
pingpong(6)
quit()
pingpong(6)
pingpong(7)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
quit()
pingpong(5)
pingpong(6)
pingpong(7)
pingpong(8)
pingpong(9)
pingpong(15)
pingpong(21)
pingpong(22)
pingpong(30)
pingpong(68)
pingpong(69)
pingpong(70)
pingpong(71)
pingpong(72)
pingpong(100)
pingpong(100777)
pingpong(10077)
pingpong(1007)
pingpong(500)
quit()
count_change(1)
count_change(0)
count_change(2)
quit()
count_change(0)
count_change(2)
count_change(3)
count_change(7)
count_change(4)
count_change(5)
count_change(6)
quit()
count_change(0)
count_change(1)
quit()
count_change(0)
count_change(1)
count_change(2)
count_change(3)
count_change(4)
quit()
count_change(1)
count_change(2)
quit()
count_change(2)
count_change(3)
count_change(4)
count_change(5)
count_change(6)
quit()
count_change(4)
quit()
count_change(1)
quit()
count_change(1)
count_change(2)
count_change(3)
count_change(4)
count_change(5)
count_change(6)
count_change(7)
count_change(10)
count_change(20)
count_change(100)
quit()
count_change(100)
quit()
count_change(100)
count_change(10)
quit()
count_change(1)
count_change(2)
quit()
count_change(2)
quit()
count_change(2)
quit()
count_change(2)
quit()
count_change(2)
count_change(4)
count_change(28)
quit()
count_change(2)
count_change(3)
count_change(4)
count_change(6)
count_change(9)
count_change(16)
count_change(28)
count_change(545)
quit()
count_change(3)
quit()
count_change(1)
count_change(2)
count_change(3)
count_change(4)
quit()
count_change(2)
quit()
count_change(7)
count_change(100)
quit()
count_change(100)
count_change(1000)
count_change(200)
quit()
move_stack(3,\0401,\0403)
quit()
move_stack(1,\0401,\0403)
move_stack(1,\0402,\0403)
move_stack(1,\0402,\0401)
move_stack(1,\0402,\0402)
move_stack(1,\0403,\0401)
move_stack(1,\0403,\0402)
quit()
move_stack(1,\0401,\0403)
quit()
move_stack(1,\0401,\0403)
quit()
move_stack(1,\0401,\0403)
move_stack(1,\0402,\0403)
move_stack(1,\0402,\0401)
move_stack(2,\0401,\0403)
quit()
move_stack(2,\0401,\0403)
move_stack(3,\0401,\0403)
quit()
move_stack(4,\0401,\0403)
quit()
move_stack(1,\0401,\0403)
move_stack(2,\0401,\0403)
move_stack(3,\0401,\0403)
move_stack(4,\0401,\0403)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
x\040=\0405
a\040for\040a\040in\040range(1,\040x+1)
[a\040for\040a\040in\040range(1,\040x+1)]
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
fact(3)
fact(4)
fact(5)
fact(6)
fact(7)
fact(8)
fact(9)
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
quit()
fact\040=\040make_anonymous_factorial()
fact(2)
quit()
[a\040for\040a\040in\040range(1,\0407)
[a\040for\040a\040in\040range(1,7)]
list\040=\040[a\040for\040a\040in\040[a\040for\040a\040in\040range(1,7)]]
list
list\040=\040[a//2\040for\040a\040in\040[a\040for\040a\040in\040range(1,7)]]
list
[a\040in\040range(1,7)]
[for\040a\040in\040range(1,7)]
list
list\040=\040[a\040for\040a\040in\040[a\040for\040a\040in\040range(1,\0407)]\040if\040not\040a\040==\0401]
list
quit()
fact\040=\040make_anonymous_factorial()
fact(1)
fact(2)
fact(3)
fact(4)
fact(5)
fact(6)
fact(7)
quit()
sum_of_mults(3,\0407,\04037)
quit()
move_disks(3)
move_disk(3)
move_stack(3)
move_stack(3,\0401,\0403)
move_stack(5,\0401,\0403)
move_stack(3,\0401,\0403)
start_game()
4
6
4
quit()
rows,\040columns,\040num_connect\040=\0403,\0403,\0402
>>>\040board\040=\040create_board(rows,\040columns)
>>>\040board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
>>>\040board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
>>>\040check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
False
>>>\040board\040=\040make_move(board,\040rows,\040columns,\0401,\040'X')[1]
>>>\040board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
>>>\040check_win_column(board,\040rows,\040columns,\040num_connect,\0401,\040'O')
False
rows,\040columns,\040num_connect\040=\0403,\0403,\0402
board\040=\040create_board(rows,\040columns)
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
quit()
rows,\040columns,\040num_connect\040=\0403,\0403,\0402
board\040=\040create_board(rows,\040columns)
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0401,\040'O')
quit()
rows,\040columns,\040num_connect\040=\0403,\0403,\0402
board\040=\040create_board(rows,\040columns)
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0401,\040'O')
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
quit()
rows,\040columns,\040num_connect\040=\0403,\0403,\0402
board\040=\040create_board(rows,\040columns)
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
quit()
rows,\040columns,\040num_connect\040=\0403,\0403,\0402
board\040=\040create_board(rows,\040columns)
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'X')[1]
board\040=\040make_move(board,\040rows,\040columns,\0401,\040'O')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0401,\040'O')
board\040=\040make_move(board,\040rows,\040columns,\0400,\040'X')[1]
check_win_column(board,\040rows,\040columns,\040num_connect,\0400,\040'X')
quit()
start_game()
4
7
4
3
4
3
2
5
start_game()
4
7
3
1
2
3
1
2
1
0
4
0
4
2
5
4
7
6
5
2
3
5
4
3
subsum(1234538,\0401)
quit()
subsum(126521,\0401)
quit()
subsum(126521,\0401)
subsum(126571,\0402)
subsum(433289100937,\0403)
subsum(433289100937,\0405)
quit()
spellcheck('wat')
quit()
correct('speling')
correct('tre')
correct('humab')
correct('facr')
quit()
spellcheck('abut')
quit()
spellcheck('abut')
spellcheck('abritrary')
spellcheck('exicting')
spellcheck('inbetween')
quit()
test()
quit()
test()
quit()
test()
quit()
test()
quit()
subsum(12984,\0401)
subsum(12984,\0402)
subsum(162553,\0402)
[a*2\040for\040a\040in\040range(0,10)]
[a\040for\040a\040in\040range(0,10)]
[a*2\040for\040a\040in\040range(0,10)\040if\040a\040%\0402\040==\0400]
quit()
par1([0,0],\040[2,5])
par2([0,0],\040[2,5])
par1([0,0],\040[3,45])
par2([0,0],\040[3,45])
def\040f(n):
\040\040if\040n\040==\0400:\040return\0400
\040\040elif\040n\040==\0401:\040return\0401
\040\040else:\040return\040f(n-1)\040+\040f(n-2)
def\040memo(f):
\040\040cache\040=\040{}
\040\040def\040memoized(n):
\040\040\040\040if\040n\040not\040in\040cache:
\040\040\040\040\040\040cache[n]\040=\040f(n)
\040\040\040\040return\040cache[n]
\040\040return\040memoized
a\040=\040memo(f)
a(1)
a(2)
a(3)
a(4)
a(5)
a(10)
a(14)
a(18)
a(11)
a(15)
a(23)
a(35)
a(36)
a(35)
a(34)
